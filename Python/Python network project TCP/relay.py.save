import os
import sys
import getopt
import subprocess
import socket
import time
import threading
import thread

end_servers = sys.argv[2]
Tracefile = open("trace.txt","a")
Pingfile = open("ping.txt","a")


pings = int(input("Give me ping "))
sport = int(input("Give me port "))

with open(end_servers) as fp:
    line = fp.readline().split(', ')
    while line:
    	    if line[-1]=='':
    		    break
	    
            if line[-1] == alias:
                alias=line[0]
                break
            
            line =  fp.readline().split(', ')

def client(end_serverip,port):

    RECV_BUFFER_SIZE = 1024 
    # Create a TCP/IP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    # Connect the socket to the port where the server is listening
    server_address = (end_serverip, int(port))
    print >>sys.stderr, 'connecting to %s port %s' % server_address
    sock.connect(server_address)
    
    try:
    # Send data
        message = 'This is the message.  It will be repeated.'
        print >>sys.stderr, 'sending "%s"' % message
        sock.sendall(message)
    
    # Look for the response
        amount_received = 0
        amount_expected = len(message)
    
        while amount_received < amount_expected:
            data = sock.recv(RECV_BUFFER_SIZE)
            amount_received += len(data)
            print >>sys.stderr, 'received "%s"' % data

    finally:
        print >>sys.stderr, 'closing socket'
        sock.close()

def serverf(port):
    
    RECV_BUFFER_SIZE = 1024 
    
    # Create a TCP/IP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    # Bind the socket to the port
    
    #By setting the host name to the empty string, it tells the bind() method to fill in the address of the current machine.
    
    server_address = ('', int(port))
    print >>sys.stderr, 'starting up on %s port %s' % server_address
    sock.bind(server_address)
    
    # Listen for incoming connections
    sock.listen(1)
    
    while True:
        # Wait for a connection
        print >>sys.stderr, 'waiting for a connection'
        connection, client_address = sock.accept()
        
        try:
            print >>sys.stderr, 'connection from', client_address
            
            while True:
                data = connection.recv(RECV_BUFFER_SIZE)
                print >>sys.stderr, 'received "%s"' % data
                if data:
                    print >>sys.stderr, 'sending data back to the client'
                    connection.sendall(data)
                else:
                    print >> sys.stderr, 'no more data from', client_address
                    break
            
        finally:
            # Clean up the connection
            connection.close()

print 'SERVER DEPLOY: ' 
##server_thread =threading.Thread(target=serverf, args=[sport])
print 'CLIENT DEPLOY: '
##client_thread =threading.Thread(target=client, args=[alias, sport])

##server_thread.daemon = True
##client_thread.daemon = True

serverf(sport)
##client_thread.start()
##time.sleep(1)
##sys.exit()
