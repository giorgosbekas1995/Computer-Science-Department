import os
import sys
import getopt
import subprocess
import socket
import time
import threading
import thread

end_servers = sys.argv[2]
relay_nodes = sys.argv[4]
Tracefile = open("trace.txt","a")
Pingfile = open("ping.txt","a")
##endservers = open(end_servers,"r")e = endservers.read()
##print file
##endservers.close()
print("Give alias:")
alias = sys.stdin.readline()
relay_node = raw_input("Give relay node ")
pings = int(input("Give me ping "))
cport = int(input("Give me port "))

with open(end_servers) as fp:
    line = fp.readline().split(', ')
    while line:
    	    if line[-1]=='':
    		    break
	    
            if line[-1] == alias:
                alias=line[0]
                break
            
            line =  fp.readline().split(', ')
            

with open(relay_nodes) as x:
    line = x.readline().split(', ')
    while line:
    	    if line[-1]=='':
    		    break
	    
            if line[0] == relay_node:
                relay_node=line[1]
                break
            
            line =  x.readline().split(', ')



ping = subprocess.Popen(["ping", alias, "-n", str(pings)],stdout=subprocess.PIPE)
while True:
    line2 = ping.stdout.readline()
    Pingfile.write(str(line2))
    print line2
    if not line2:
        break
##x = ping.communicate()
##Pingfile.write(str(x)) 
Pingfile.close()
##from subprocess import Popen, PIPE
p = subprocess.Popen(["tracert", str(alias)], stdout=subprocess.PIPE)
while True:
    line = p.stdout.readline()
    Tracefile.write(str(line))
    print line
    if not line:
        break
    # Do stuff with line
Tracefile.close()
##for i in range(pings):
##	os.system("ping " + alias)




def client(relayip,port):

    RECV_BUFFER_SIZE = 1024 
    # Create a TCP/IP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    # Connect the socket to the port where the server is listening
    server_address = (relayip, int(port))
    print >>sys.stderr, 'connecting to %s port %s' % server_address
    sock.connect(server_address)
    
    try:
    # Send data
        message = 'This is the message.  It will be repeated.'
        print >>sys.stderr, 'sending "%s"' % message
        sock.sendall(message)
    
    # Look for the response
        amount_received = 0
        amount_expected = len(message)
    
        while amount_received < amount_expected:
            data = sock.recv(RECV_BUFFER_SIZE)
            amount_received += len(data)
            print >>sys.stderr, 'received "%s"' % data

    finally:
        print >>sys.stderr, 'closing socket'
        sock.close()

def serverf(port):
    
    RECV_BUFFER_SIZE = 1024 
    
    # Create a TCP/IP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    # Bind the socket to the port
    
    #By setting the host name to the empty string, it tells the bind() method to fill in the address of the current machine.
    
    server_address = ('', int(port))
    print >>sys.stderr, 'starting up on %s port %s' % server_address
    sock.bind(server_address)
    
    # Listen for incoming connections
    sock.listen(1)
    
    while True:
        # Wait for a connection
        print >>sys.stderr, 'waiting for a connection'
        connection, client_address = sock.accept()
        
        try:
            print >>sys.stderr, 'connection from', client_address
            
            while True:
                data = connection.recv(RECV_BUFFER_SIZE)
                print >>sys.stderr, 'received "%s"' % data
                if data:
                    print >>sys.stderr, 'sending data back to the client'
                    connection.sendall(data)
                else:
                    print >> sys.stderr, 'no more data from', client_address
                    break
            
        finally:
            # Clean up the connection
            connection.close()



print 'SERVER DEPLOY: ' 
server_thread =threading.Thread(target=serverf, args=[cport])
print 'CLIENT DEPLOY: '
client_thread =threading.Thread(target=client, args=[relay_node, cport])

server_thread.daemon = True
client_thread.daemon = True
server_thread.start()
client_thread.start()
time.sleep(1)
sys.exit()
